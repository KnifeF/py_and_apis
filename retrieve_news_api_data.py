"""
The program is powered by NewsAPI.org!
It gets queries and some other params as input from user (through command line),
and retrieving relevant data of news articles from NewsAPI by these queries.
It uses an unofficial Python client library to integrate News API (by https://github.com/mattlisiv/newsapi-python).
Then, the returned json outputs from the articles data are stored as CSV files on the destination path,
named by search queries.

In order to use this program you might need to know that:
1) It is powered by NewsAPI.org, and all the retrieved content is generated by their API.
2) Any use of this script is limited to NewsAPI.org terms of service, privacy policy, pricing, etc. -
https://newsapi.org/terms, https://newsapi.org/privacy, https://newsapi.org/pricing (for more info
please visit newsapi.org), so you should accept their terms before using this (Use at your own risk!).
3) I have used the free authenticated (api-key) account for developing (educational) - that is for all
non-commercial projects (including open-source) and in-development commercial projects, according to the
website's terms (when I have written this).
4) You may want to register in order to get an api key for NewsAPI - https://newsapi.org/register.
5) Please make sure to follow the website's API calls limit (500 requests per day, when writing this),
or consider to switch to a paid plan on NewsAPI.org.
6 ) optional arguments:
-h, --help:  show help message and exit
-q, --queries: search news by these queries (default: cyber)
-l, --language: search news that is written in this language (default: en)
-s, --sort_by: The order to sort the articles in - relevancy OR popularity
OR publishedAt (default: relevancy)
-t, --time_range: search news that is published on given time range (by weeks) -
1 OR 2 OR 3 (default: 2)
-d, --dest_path: destination path to save the file with search results data (default: the desktop path)
-k, --key: your api-key to access NewsAPI in order to retrieve news articles


## Disclaimer:
The program is for educational purposes only, in order to learn some basic work with APIs, JSON, etc.,
so whether it violates TOS somehow, please let me know and I will remove this repo.
Use at your own risk.
"""
import os
import sys
import argparse
import json
import pandas as pd
from datetime import date, timedelta
from newsapi import NewsApiClient, const

# -*- coding: UTF-8 -*-
__author__ = "KnifeF"
__license__ = "MIT"
__email__ = "knifef@protonmail.com"
# The program is powered by NewsAPI.org!

DESKTOP_PATH = os.path.join(os.environ["HOMEPATH"], "DESKTOP")
TO_DATE = date.today()  # Return the current local date (today)
QUERY_LIMIT = 5


class FetchNewsAPI(object):
    """FetchNewsAPI object to fetch some news articles by given queries&params,
    using the 'NewsApiClient' (a Python client library to integrate News API),
    with GET requests to https://newsapi.org/v2/everything.
    It is powered by NewsAPI.org"""

    def __init__(self, queries: list, language: str, sort_by: str,
                 from_date: str, to_date: str, dest_path: str, api_key: str):
        """
        init FetchNewsAPI object
        :param queries: queries to search news
        :param language:  language of retrieved news
        :param sort_by:  news api sort method
        :param from_date: date to start search news
        :param to_date: date to end search news
        :param dest_path: destination path for saving results
        :param api_key: api key that should be found on
        """
        self.queries = queries  # queries to search via NewsAPI
        self.language = language  # language
        self.sort_by = sort_by  # news articles sort method
        self.from_date = from_date  # search from date
        self.to_date = to_date  # search to date
        self.dest_path = dest_path  # destination path to save search results
        self.news_api_key = api_key  # api key for NewsAPI

        # Init NewsApiClient
        #  unofficial Python client library to integrate News API
        #  (by https://github.com/mattlisiv/newsapi-python)
        self.news_api = NewsApiClient(api_key=self.news_api_key)

    def fetch_everything_by_queries(self):
        """
        fetches search results data from the NewsAPI using 'NewsApiClient',
        by given queries and required params, and stores results to CSV files.
        :return:
        """
        for query in self.queries:
            # GET request to https://newsapi.org/v2/everything,
            # with given params and ret response as JSON
            all_articles = self.news_api\
                .get_everything(q=query,
                                from_param=self.from_date,
                                to=self.to_date,
                                language=self.language,
                                sort_by=self.sort_by,
                                page=2
                                )

            if all_articles and (all_articles["totalResults"] > 0) \
                    and all_articles['articles']:

                # Load the JSON into a pandas data frame
                df = pd.read_json(path_or_buf=json.dumps(all_articles['articles']),
                                  orient='columns')

                # Write DataFrame to a comma-separated values (csv) file
                df.to_csv(path_or_buf=os.path.join(self.dest_path, query+".csv"),
                          sep=',', encoding='utf-8-sig', index=False)


def main():
    """
    main method
    :return:
    """
    # Object for parsing command line strings into Python objects.
    parser = argparse.ArgumentParser(description='Use NewsApi to fetch some '
                                                 'news data (powered by NewsAPI.org)')
    # Adding arguments
    parser.add_argument(
        '-q', '--queries',
        default=['cyber'],
        nargs='*',
        help='search news by these queries (default: cyber)'
    )
    parser.add_argument(
        '-l', '--language',
        type=str,
        default='en',
        help='search news that is written in this language '
             '(default: en)'
    )
    parser.add_argument(
        '-s', '--sort_by',
        type=str,
        default='relevancy',
        help='The order to sort the articles in - relevancy OR '
             'popularity OR publishedAt (default: relevancy)'
    )
    parser.add_argument(
        '-t', '--time_range',
        type=int,
        default=2,
        help='search news that is published on given time '
             'range (by weeks) - 1 OR 2 OR 3 (default: 2)'
    )
    parser.add_argument(
        '-d', '--dest_path',
        type=str,
        default=DESKTOP_PATH,
        help='destination path to save the file with search '
             'results data (default: the desktop path)'
    )
    parser.add_argument(
        '-k', '--key',
        type=str,
        default='your123api456key',
        help='your api-key to access NewsAPI in order '
             'to retrieve news articles'
    )
    # parse Command line arguments
    args = parser.parse_args()
    print(args)

    queries = args.queries  # queries to search via NewsAPI
    language = args.language  # language arg
    sort_by = args.sort_by  # sort method
    time_range = args.time_range  # time range arg (num of weeks)
    d_path = args.dest_path  # dest folder path
    api_key = args.key  # api key for using NewsAPI

    # Test whether a path exists
    if not (os.path.exists(d_path) and os.path.isdir(d_path)):
        if os.path.exists(DESKTOP_PATH) and os.path.isdir(DESKTOP_PATH):
            d_path = DESKTOP_PATH
        else:
            sys.exit("The destination path is not exist")

    # the params are supported (language, sort method,
    # max time_range is 4 weeks --> 'Search articles up to a month old')
    if (language in const.languages) and (sort_by in const.sort_method) \
            and (0 <= time_range <= 4):
        # the date of yesterday
        from_date = str(TO_DATE - timedelta(days=1))
        if time_range > 0:
            # the date of today-given weeks
            from_date = str(TO_DATE - timedelta(days=7*args.time_range))
    else:
        sys.exit("One or more of the given params are "
                 "not supported by the NewsAPI free account")

    if queries and isinstance(queries, list):
        # limit num of given queries to search
        # (each query call a GET request to NewsAPI)
        if len(queries) > QUERY_LIMIT:
            queries = queries[:QUERY_LIMIT]

        # init FetchNewsAPI obj
        fetch_news_obj = FetchNewsAPI(queries=queries, language=language, sort_by=sort_by,
                                      from_date=from_date, to_date=str(TO_DATE),
                                      dest_path=d_path, api_key=api_key)

        # fetch search results from NewsAPI using given params and queries
        fetch_news_obj.fetch_everything_by_queries()
    else:
        sys.exit("bad queries input")


if __name__ == '__main__':
    main()
