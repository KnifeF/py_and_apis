"""The program is Powered By GIPHY!
It gets a search term as an input from user (through text entry box in a basic Bottle web app
on localhost:8080), and displaying a random matched GIF for that search term.
It uses an urllib to send GET requests to Giphy API (https://api.giphy.com),
on 'Random Endpoint' (/v1/gifs/random) - for more info: https://developers.giphy.com/docs/#random-endpoint
Then, extracting relevant data from the returned JSON to display the GIF on the web app.
The web app is using 'Bottle' framework (fast and simple micro-framework for small web
applications - Homepage and documentation: https://bottlepy.org).

In order to use this program you might need to know that:
1) It is Powered By GIPHY, and all the retrieved content is generated by their API.
2) Any use of this script is limited to 'GIPHY' terms and their 'GIPHY API'&'GIPHY SDK' terms of service,
privacy policy, etc. - info on their website:
https://giphy.com/, https://developers.giphy.com/,
https://support.giphy.com/hc/en-us/articles/360028134111-GIPHY-API-Terms-of-Service-,
https://support.giphy.com/hc/en-us/articles/360027858552-Giphy-SDK-License-Agreement, etc.
(for more info please visit https://giphy.com/).
So, you should accept their terms before using this (Use at your own risk!).
3) I have used the free authenticated (api-key) account for developing (educational) with
registered app - that is an open-source non-commercial tiny project for educational purposes.
4) You may want to register in order to get an api key for GIPHY - https://developers.giphy.com/.
5) Please make sure to follow the website's API calls limit (follow their rate-limit on their website):
***the rate-limit when writing this***
"Q: What's the rate-limit for a newly created key?
A: We allow all newly created keys to have a maximum of 42 search requests an hour,
1000 search requests a day and 10 upload requests a day."
Please do not rely on this, and make sure to follow their rate-limit & terms that may be changed
from time to time - I have found these details on https://developers.giphy.com/faq/

## Disclaimer:
The program is for educational purposes only, in order to learn some basic work with APIs, JSON, etc.,
so whether it violates TOS somehow, please let me know and I will remove this repo.
Use at your own risk."""
import json
import urllib.request
import urllib.parse
from urllib.error import URLError, HTTPError
from bottle import run, route, error, request, redirect, template

# -*- coding: UTF-8 -*-
__author__ = "KnifeF"
__license__ = "MIT"
__email__ = "knifef@protonmail.com"
# The program is Powered By GIPHY!! (using https://developers.giphy.com/docs/#random-endpoint)

# **************************** Giphy API URL+endpoint *******************************
# Giphy API base url
GIPHY_API_URL = 'https://api.giphy.com'
# Giphy Random Endpoint - Returns a random GIF within the category
# of a specified tag. If no tag is specified, the GIF returned
# will be completely random.
RANDOM_GIF_ENDPOINT = '/v1/gifs/random'

# **************************** Request Parameters ***********************************
# api key for Giphy API
API_KEY = 'YOUR-API-KEY'
# tag to search Gif
# TAG = 'trump'
# rating for results - more details on https://www.mpaa.org/film-ratings/
RATING = 'PG-13'
# results limit
LIMIT = 1
# required format
REQUIRED_FORMAT = 'json'

# **************** Default GIF src and size (height&width) **************************
DEFAULT_SRC = "https://media1.giphy.com/media/2fOkJ8LNV5GpXP7n7r/giphy.gif" \
          "?cid=ab8902cd5d11bf564a68724c36250a0d&rid=giphy.gif"
DEFAULT_HEIGHT = "270"
DEFAULT_WIDTH = "480"

# *************************** Basic HTML Template ***********************************
TEMPLATE_STR = """
    <body style="background-color: #da50ff">
    <h1>Match a GIF to your search term</h1>
    <img src="{{rand_gif}}" height="{{gif_height}}" width="{{gif_width}}" style="padding: 10px">
    <form action="/" method="post" style="padding: 20px">
    Search term: <input name="query" type="text" />
    <input value="Fetch random GIF" type="submit" />
    </form>
    <h3>Powered By GIPHY!</h3>
    </body>
    """


def fetch_random_gif(search_term):
    """
     takes the search term and retrieve a random gif that matches,
     using 'Giphy API' (/v1/gifs/random). note: api-key is needed to access the API.
     Powered By GIPHY!
    :param search_term: search term to send within an HTTP GET request to
    Giphy API on 'Random Endpoint' (str)
    :return: a list with img src, height and width of retrieved gif (random gif)
    """
    gif_data = []
    # tag to search - should be in lowercase to work properly!
    tag = search_term.lower()
    # dict with data for http request (using urllib.request.urlopen)
    data_for_request = {
        'api_key': API_KEY,
        'tag': tag,
        'rating': RATING,
        'fmt': REQUIRED_FORMAT
    }
    # Encode a dict or sequence of two-element tuples
    # into a URL query string.
    url_values = urllib.parse.urlencode(data_for_request)
    # the full url string including - base url + endpoint
    # + request parameters
    url_to_get = GIPHY_API_URL + RANDOM_GIF_ENDPOINT + '?' + url_values

    try:
        # opens the URL, returns the results and reads to string object
        response = urllib.request.urlopen(url_to_get).read().decode('utf-8')

        # print(response, "\n\n\n*****************************************\n\n")

        # Deserialize string instance (containing a JSON document)
        # to a Python object.
        response_data = json.loads(response)

        # append to list the url of retrieved gif
        gif_data.append(response_data['data']['images']['original']['url'])
        # append to list the height of retrieved gif
        gif_data.append(response_data['data']['images']['original']['height'])
        # append to list the width of retrieved gif
        gif_data.append(response_data['data']['images']['original']['width'])

        print(gif_data)

    except HTTPError as e:
        print('The server couldn\'t fulfill the request.')
        print('Error code: ', e.code)
        return None
    except URLError as e:
        print('We failed to reach a server.')
        print('Reason: ', e.reason)
        return None

    return gif_data


@route('/')
def index():
    """
    base web page (index) - GET method (GET is default)
    :return: rendered template as a string iterator, with other params
    """
    return template(TEMPLATE_STR, rand_gif=DEFAULT_SRC,
                    gif_height=DEFAULT_HEIGHT, gif_width=DEFAULT_WIDTH)


@route('/', method='POST')
def index():
    """
    base web page (index) -  POST method, after filling a form with a
    search term, should try to retrieve GIF from Giphy API (Random Endpoint)
    :return: rendered template as a string iterator, with other params
    """
    # Get the named/indexed field object, or 'default' if no field
    # is found as string (search term)
    query = str(request.forms.get('query'))

    if query:

        # list of the words in str, using ' ' as the delimiter string
        split_query = query.split(' ')

        # search term is less than 3 words
        if len(split_query) < 3:
            # iterate list
            for word in split_query:
                # not all characters in str are alphabetic
                if not word.isalpha():
                    print('wrong input - redirect url')
                    # Aborts execution and causes a 303 or 302 redirect, depending on
                    # the HTTP protocol version
                    return redirect('/')

            # takes the search term and retrieve a random gif that matches,
            # using 'Giphy API' (/v1/gifs/random), and returns as a list with
            # img src, height and width of the gif
            gif_params = fetch_random_gif(query)

            # gif_params should be a list with 3 params - img src, height
            # and width of the gif
            if gif_params and isinstance(gif_params, list) \
                    and len(gif_params) == 3:
                # render template
                return template(TEMPLATE_STR, rand_gif=gif_params[0],
                                gif_height=gif_params[1], gif_width=gif_params[2])
        else:
            print('too long input - redirect url')
    else:
        print('empty input - redirect url')
    # Aborts execution and causes a 303 or 302 redirect, depending on
    # the HTTP protocol version
    return redirect('/')


@error(404)
def error404(err):
    """
    generate a 404 Not Found web page when a user attempts
    to follow a broken or dead link.
    :param err: error
    :return:
    """
    return '<h1>Nothing here, sorry</h1>' \
           '<a href="/">Back to homepage!</a>'


if __name__ == '__main__':
    run(host='localhost', port=8080, debug=True)
